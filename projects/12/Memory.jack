// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array memory;
    static Array freeList;
    static Array NO_BLOCK;

    static int freeList_Length;
    static int freeList_Next;

    static int alloc_size;

    /** Initializes the class. */
    function void init() {
        let memory = 0;
        let freeList = 2048;
        let NO_BLOCK = 16384;
        let freeList_Length = 0;
        let freeList_Next = 1;
        let alloc_size = -1;
        let freeList[freeList_Length] = 16384 - 2048;
        let freeList[freeList_Next] = null;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array prev_block;
        var Array found_block;

        let prev_block = Memory.best_fit(size);
        if (prev_block = NO_BLOCK) {
            let found_block = null;
        } else {
            if (prev_block = null) {
                let found_block = freeList;
                let freeList = Memory.do_alloc(found_block, size);
            } else {
                let found_block = prev_block[freeList_Next];
                let prev_block[freeList_Next] = Memory.do_alloc(found_block, size);
            }
        }
        return found_block + 1;
    }

    function Array best_fit(int size) {
        var Array best_block;
        var Array prev_block;
        var Array cur_block;
        var int best_size;
        var int cur_size;

        let best_block = NO_BLOCK;
        let best_size = 16384 - 2048;
        let cur_block = freeList;
        let prev_block = null;

        while (~(cur_block = null)) {
            let cur_size = cur_block[freeList_Length]-1;
            if (~(cur_size < size) & (cur_size < best_size)) {
                let best_block = prev_block;
                let best_size = cur_size;
            }
            let prev_block = cur_block;
            let cur_block = cur_block[freeList_Next];
        }
        return best_block;
    }

    function Array do_alloc(Array found_block, int size) {
        var Array next_block;
        var int block_size;

        if (found_block[freeList_Length] > (size+1+2)) {
            let next_block = found_block + size + 1;
            let next_block[freeList_Next] = found_block[freeList_Next];
            let next_block[freeList_Length] = found_block[freeList_Length] - (next_block - found_block);
            let found_block = found_block + 1;
            let found_block[alloc_size] = size + 1;
        } else {
            let next_block = found_block[freeList_Next];
            let block_size = found_block[freeList_Length];
            let found_block = best_block + 1;
            let found_block[alloc_size] = block_size;
        }
        return next_block;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array object) {
        var int size;
        var Array prev_block;
        var Array next_block;

        let size = object[alloc_size];
        let object = object - 1;
        let prev_block = Memory.find_prev_free(object);

        if (prev_block = null) {
            let object[freeList_Length] = size;
            let object[freeList_Next] = freeList;
            let freeList = object;
            let prev_block = object;
        } else {
            if ((prev_block + prev_block[freeList_Length]) = object) {
                let prev_block[freeList_Length] = prev_block[freeList_Length] + size;
            } else {
                let object[freeList_Length] = size;
                let object[freeList_Next] = prev_block[freeList_Next];
                let prev_block[freeList_Next] = object;
                let prev_block = object;
            }
        }
        if ((prev_block + prev_block[freeList_Length]) = prev_block[freeList_Next]) {
            let next_block = prev_block[freeList_Next];
            let prev_block[freeList_Length] = prev_block[freeList_Length] + next_block[freeList_Length];
            let prev_block[freeList_Next] = next_block[freeList_Next];
        }
        return;
    }

    function Array find_prev_free(Array object) {
        var Array block;

        if (freeList > object) {
            return null;
        }

        let block = freeList;
        while (~(block[freeList_Next] = null) & (block[freeList_Next] < object)) {
            let block = block[freeList_Next];
        }
        return block;
    }
}
